Overwatch character recommender

let level = { low, medium, high }

A hero is defined by his/her:
	strategy 			{ level }
	mechanics 			{ level }
	attack_type 		{ projectile, hitscan }
	attack_speed		{ semi_auto, auto }
	mobility			{ level }
	teamwork			{ level }

A Player is defined by his/her:
	skill				{ level } //Can determine by fps experience
	aim					{ level }
	aiming_preference	{ flicking, tracking }
	reaction_time		{ level } //note: high means quick, low means slow
	wits				{ level } //note: similar to reaction_time, but more about decision-making than instinct
	weapon_preference	{ projectile, hitscan }
	teamwork			{ level } //how much the player likes to rely on and work with a team

Rules:
	~low skill:
		bastion
		dva
		lucio
		mercy
		pharah
		repear
		rein
		hog
		sym
		torb
		winston
			~teamwork low:
				reaper
			~teamwork med:
				bastion
				pharah
				sym
				winston
				torb
					~aiming_preference flick:
						pharah
						torb
							~aim low/med:
								torb
							~aim high:
								pharah
					~aiming_preference track:
						bastion
						sym
						winston
							~aim low:
								sym
								winston
									~wits low:
										sym
									~wits med/high:
										winston
							~aim high:
								bastion
			~teamwork high:
				dva
				lucio
				mercy
				rein
				hog
					~weapon_preference hitscan:
						dva
					~weapon_preference projectile:
						lucio
						mercy
						rein
						hog
							~aim low:
								mercy
								rein
									~wits med/low:
										mercy
									~wits high:
										rein
							~aim medium:
								lucio
							~aim high:
								hog
	~medium skill:
		bastion
		hanzo
		junkrat
		mccree
		mei
		orisa
		pharah
		repear
		soldier
		widow
		winston
		zarya
			~weapon_preference hitscan:
				bastion
				mccree
				reaper
				soldier
				widow
				winston
				zarya
					~teamwork high:
						zarya
					~teamwork medium:
						mccree
						soldier
						winston
							~aiming_preference tracking:
								soldier
								winston
									~aim low:
										winston
									~aim med/high:
										soldier
							~aiming_preference flicking:
								mccree
					~teamwork high:
						bastion
			~weapon_preference projectile:
				hanzo
				junkrat
				mei
				orisa
				pharah
					~aiming_preference track:
						mei
						orisa
							~teamwork med/low:
								mei
							~teamwork high:
								orisa
					~aiming_preference flick:
						hanzo
						junkrat
						pharah
							~aim low:
								junkrat
							~aim med:
								pharah
							~aim high:
								hanzo
	~high skill:
		ana
		doomfist
		genji
		hanzo
		mcree
		mei
		soldier
		sombra
		tracer
		widow
		zen
			~teamwork high:
				ana
				zen
					~weapon_preference hitscan:
						ana
					~weapon_preference projectile:
						zen
			~teamwork medium:
				mccree
				mei
				soldier
					~aiming_preference flick:
						mccree
					~aiming_preference track:
						mei
						soldier
							~weapon_preference hitscan:
								soldier
							~weapon_preference projectile:
								mei
			~teamwork low:
				doomfist
				genji
				hanzo
				tracer
				widow
					~weapon_preference hitscan:
						tracer
						widow
							~reaction_time high/med:
								tracer
							~reaction_time low:
								widow
					~weapon_preference projectile:
						doomfist
						genji
						hanzo
							~reaction_time low:
								hanzo
							~reaction_time med:
								doomfist
							~reaction_time high:
								genji


============
CLIPS Notes:
============
2.4.1.1 Ordered facts
	(assert (color red)) - adds unordered fact (color red) to facts. color is symbol denoting relation (e.g. (father-of jack bill)) and red is the descriptive field

Example of user input:
(defrule read-input
	;if
	;No conditions: always run
	=>
	;then
	(printout t "Name a primary color" crlf) ;print message to terminal (t) followed by a carriage return + line feed
	(assert (color (read))) ;read a value from the user, then assert it as an unordered fact of the form (color [symbol]) where [symbol] is a symbol value made from the user's input
)
(defrule check-input
	?color <- (color ?color-value&red|yellow|blue)	;execute for each fact, store any (color [symbol]) fact into ?color if [symbol] is red, yellow, or blue
													;In other words, every fact is matched against (color [symbol]).
													;If it's a match, then it tests that [symbol] against red|yellow|blue.
													;If it's still a match, then store into ?color.
													;Then since a match was found the condition will evaluate to truthy and thus execute the rule.
													;See Basic Programming Guide, 5.4.1.3, example 1
	=>
	(retract ?color) ;Take the read-in color fact out of the fact pool, since we're done with it now
	(printout t "Correct" crlf) ;Perform all actions that need to happen when good input is supplied
)

Example of testing for an object with slots:
(defrule test-for-object-of-type
	(object
		(is-a TYPENAME)
	)
	=> ;do nothing
)
(defrule test-for-object-with-slot
	(object
		(is-a RECTANGLE)
		(area)
	)
	=> ;do nothing
)
(defrule test-for-slot-value
	(object
		(is-a DOG)
		(tail long|curly)
	)
	=> ;do nothing
)
